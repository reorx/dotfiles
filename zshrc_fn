# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
function dataurl() {
  echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

function sshfwd() {
    # Options explaination
    #   q  Quiet mode.  Causes most warning and diagnostic messages to be suppressed.
    #   T  Disable pseudo-tty allocation.
    #   N  Do not execute a remote command.  This is useful for just forwarding ports (protocol version 2 only).
    #   D  bind address to port
    ssh -qTNv -D 7070 $@
}

function colortable256() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

function download_benchmark() {
    DOWNLOAD_SPEED=`wget -O /dev/null $1 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}'`
    echo "$DOWNLOAD_SPEED ($1)"
}

function tarczf() {
    tar czf $1.tar.gz $1
}

function td() {
    local dir="$(basename $PWD)"
    dir="${dir/./-}"
    tmux has-session -t "=$dir" 2>/dev/null 1>&2
    if [ $? -eq 0 ]; then
        tmux a -t "=$dir"
    else
        tmux new -s "$dir"
    fi
}

function tmux-resurrect-reset-last() {
    cd ~/.tmux/resurrect && \
        ln -f -s $(/bin/ls -t tmux_resurrect_*.txt | head -n 1) last && \
        /bin/ls -l last
}

function lesshelp() {
    $@ --help | less
}

function pve-new() {
    if [ -n "$1" ]; then
        local venv="${1%/}"
    else
        local venv="venv"
    fi
    echo "Create virtualenv $venv"
    python -m venv "$venv"
    echo "Activiate virtualenv $venv"
    eval "source $venv/bin/activate"
}

function pve-activate() {
    if [ -n "$1" ]; then
        local venv="${1%/}"
    else
        local venv="venv"
    fi
    echo "Activiate virtualenv $venv"
    eval "source $venv/bin/activate"
}

# openssl function series

function ssl-dates() {
    host=$1;
    port=${2:-443};
    openssl s_client -connect $host:$port -servername $host 2>&1 < /dev/null | openssl x509 -noout -dates
}

function ssl-chain() {
    host=$1;
    port=${2:-443};
    openssl s_client -connect $host:$port -servername $host 2>&1 < /dev/null | sed -n '1,/^---$/d;/^---$/,$!p'
}

function ssl-chain-resolve() {
    host=$1;
    port=${2:-443};
    ip=$3;
    openssl s_client -connect $ip:$port -servername $host 2>&1 < /dev/null | sed -n '1,/^---$/d;/^---$/,$!p'
}

function ssl-text() {
    host=$1;
    port=${2:-443};
    openssl s_client -connect $host:$port -servername $host 2>&1 < /dev/null | openssl x509 -text
}

function ssl-download-crt() {
    host=$1;
    port=${2:-443};
    openssl s_client -connect $host:$port -servername $host 2>&1 < /dev/null |\
        sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > $1.crt
}

# docker functions

function divein {
    docker exec -it $1 /bin/bash
}

function runsh {
    docker run -it --rm $1 /bin/sh
}

function imagesize {
    docker image inspect $@ --format='{{.RepoTags}} {{.Size}}'
}

# python functions
#
function uuid {
    python -c 'import uuid; print(str(uuid.uuid4()), end="")'
}

function iso8601 {
    python -c 'import datetime as dt; print(dt.datetime.now().isoformat()[:-3] + "Z")'
}

function urlencode() {
    python -c 'import urllib, sys; print urllib.quote(sys.argv[1])' $1
}

function py_find_packages() {
    python -c 'from setuptools import find_packages; print find_packages()'
}

function b64encode() {
    python -c 'import sys, base64 as b64; print(b64.b64encode(sys.stdin.read().encode()).decode())'
}

function b64decode() {
    python -c 'import sys, base64 as b64; print(b64.b64decode(sys.stdin.read().encode()).decode())'
}

function jsonstr() {
    python -c 'import sys, json; s = sys.stdin.read(); print(json.dumps(s))'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn't break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function link-local-bin() {
    if [ -n "$2" ]; then
        ln -s "$PWD/$1" ~/.local/bin/$2
    else
        ln -s "$PWD/$1" ~/.local/bin
    fi
}

function tmp-upload() {
    local download_url=$(curl --upload-file ./$1 https://transfer.sh/$1)
    echo "curl -o $1 $download_url"
    echo "curl -o $1 $download_url" | pbcopy
    echo "The above command has been copied to clipboard."
}

function tgz-create() {
    local dir="$1"
    local delete_source=""
    if [ "$1" = "-d" ]; then
        dir="$2"
        delete_source="true"
    fi
    local out="${dir%/}.tgz"
    tar czf "$out" "$dir"
    ls -lh "$out"
    if [ -n "$delete_source" ]; then
        echo "Delete source dir $dir"
        rm -rf "$dir"
    fi
}

function ccglm() {
    ANTHROPIC_BASE_URL=https://open.bigmodel.cn/api/anthropic \
        ANTHROPIC_AUTH_TOKEN=$GLM_API_TOKEN \
        ANTHROPIC_DEFAULT_OPUS_MODEL=glm-4.5 \
        ANTHROPIC_DEFAULT_SONNET_MODEL=glm-4.5 \
        ANTHROPIC_DEFAULT_HAIKU_MODEL=glm-4.5-air \
        ANTHROPIC_MODEL=glm-4.5 \
        claude --dangerously-skip-permissions $@
}
